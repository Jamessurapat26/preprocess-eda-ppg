# -*- coding: utf-8 -*-
"""สำเนาของ ExtractionTest_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LhTm8FgEBJmFlFafouTgfCNyqGIgxJdP
"""

pip install neurokit2

import pandas as pd

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
import pandas as pd

drive.mount('/content/drive')
# %cd "/content/drive/MyDrive/DATA-17-11"

"""##EDA"""

EDA_baseline_R1 = pd.read_csv('Round 1/EDA_Baseline_R1.csv')
EDA_baseline_R2 = pd.read_csv('Round 2/EDA_Baseline_R2.csv')
EDA_baseline_R3 = pd.read_csv('Round 3/EDA_Baseline_R3.csv')

EDA_low_R1 = pd.read_csv('Round 1/EDA_low_R1.csv')
EDA_low_R2 = pd.read_csv('Round 2/EDA_low_R2.csv')
EDA_low_R3 = pd.read_csv('Round 3/EDA_low_R3.csv')

EDA_medium_R1 = pd.read_csv('Round 1/EDA_medium_R1.csv')
EDA_medium_R2 = pd.read_csv('Round 2/EDA_medium_R2.csv')
EDA_medium_R3 = pd.read_csv('Round 3/EDA_medium_R3.csv')

EDA_high_R1 = pd.read_csv('Round 1/EDA_high_R1.csv')
EDA_high_R2 = pd.read_csv('Round 2/EDA_high_R2.csv')
EDA_high_R3 = pd.read_csv('Round 3/EDA_high_R3.csv')

EDA_baseline_R1

import matplotlib.pyplot as plt
import numpy as np
from scipy.signal import find_peaks

plt.figure(figsize=(18, 6))
plt.plot(EDA_baseline_R1['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_baseline_R2['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_baseline_R3['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_low_R1['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_low_R2['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_low_R3['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_medium_R1['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_medium_R2['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_medium_R3['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_high_R1['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_high_R2['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_high_R3['EDA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

"""**Preprocessing**"""

import neurokit2 as nk

# Assuming your PPG signal is in a column named 'PPG'
# Extract the PPG signal as a 1D array before cleaning
EDA_baseline_R1_Cleaned = nk.eda_clean(EDA_baseline_R1['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'
EDA_baseline_R2_Cleaned = nk.eda_clean(EDA_baseline_R2['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'
EDA_baseline_R3_Cleaned = nk.eda_clean(EDA_baseline_R3['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'

EDA_low_R1_Cleaned = nk.eda_clean(EDA_low_R1['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'
EDA_low_R2_Cleaned = nk.eda_clean(EDA_low_R2['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'
EDA_low_R3_Cleaned = nk.eda_clean(EDA_low_R3['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'

EDA_medium_R1_Cleaned = nk.eda_clean(EDA_medium_R1['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'
EDA_medium_R2_Cleaned = nk.eda_clean(EDA_medium_R2['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'
EDA_medium_R3_Cleaned = nk.eda_clean(EDA_medium_R3['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'

EDA_high_R1_Cleaned = nk.eda_clean(EDA_high_R1['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'
EDA_high_R2_Cleaned = nk.eda_clean(EDA_high_R2['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'
EDA_high_R3_Cleaned = nk.eda_clean(EDA_high_R3['EDA'],sampling_rate=15, method='biosppy') # Changed method to 'biosppy'

EDA_baseline_R1_Cleaned

plt.figure(figsize=(18, 6))
plt.plot(EDA_baseline_R1_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_baseline_R2_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_baseline_R3_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_low_R1_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_low_R2_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_low_R3_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_medium_R1_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_medium_R2_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_medium_R3_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_high_R1_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_high_R2_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(18, 6))
plt.plot(EDA_high_R3_Cleaned, label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

import neurokit2 as nk
import numpy as np

# Load and preprocess the PPG signal (ensuring it's numeric)
eda_signal_bl_01 = EDA_baseline_R1_Cleaned[:3000].astype(float)

# Process the PPG signal
signals_bl_01, info_bl_01 = nk.eda_process(eda_signal_bl_01, sampling_rate=100)

# Plot the results
nk.eda_plot(signals_bl_01, info_bl_01)

analyze_bl_01 = nk.eda_analyze(signals_bl_01, sampling_rate=100, method="auto")
analyze_bl_01

# Load and preprocess the PPG signal (ensuring it's numeric)
eda_signal_low_03 = EDA_low_R3_Cleaned[:3000].astype(float)

# Process the PPG signal
signals_low_03, info_low_03 = nk.eda_process(eda_signal_low_03, sampling_rate=100)

# Plot the results
nk.eda_plot(signals_low_03, info_low_03)

analyze_low_03 = nk.eda_analyze(signals_low_03, sampling_rate=100, method="auto")
analyze_low_03

# Load and preprocess the PPG signal (ensuring it's numeric)
eda_signal_md_03 = EDA_medium_R3_Cleaned[:3000].astype(float)

# Process the PPG signal
signals_md_03, info_md_03 = nk.eda_process(eda_signal_md_03, sampling_rate=100)

# Plot the results
nk.eda_plot(signals_md_03, info_md_03)

analyze_md_03 = nk.eda_analyze(signals_md_03, sampling_rate=100, method="auto")
analyze_md_03

# Load and preprocess the PPG signal (ensuring it's numeric)
eda_signal_high_03 = EDA_high_R3_Cleaned[:3000].astype(float)

# Process the PPG signal
signals_high_03, info_high_03 = nk.eda_process(eda_signal_high_03, sampling_rate=100)

# Plot the results
nk.eda_plot(signals_high_03, info_high_03)

analyze_high_03 = nk.eda_analyze(signals_high_03, sampling_rate=100, method="auto")
analyze_high_03

import neurokit2 as nk
import matplotlib.pyplot as plt

# Dictionary ของสัญญาณที่ผ่านการทำความสะอาด (เลือกช่วง 30 วินาที)
eda_cleaned_signals = {
    "Baseline_R1": EDA_baseline_R1_Cleaned[:3000].astype(float),
    "Baseline_R2": EDA_baseline_R2_Cleaned[:3000].astype(float),
    "Baseline_R3": EDA_baseline_R3_Cleaned[:3000].astype(float),
    "Low_R1": EDA_low_R1_Cleaned[:3000].astype(float),
    "Low_R2": EDA_low_R2_Cleaned[:3000].astype(float),
    "Low_R3": EDA_low_R3_Cleaned[:3000].astype(float),
    "Medium_R1": EDA_medium_R1_Cleaned[:3000].astype(float),
    "Medium_R2": EDA_medium_R2_Cleaned[:3000].astype(float),
    "Medium_R3": EDA_medium_R3_Cleaned[:3000].astype(float),
    "High_R1": EDA_high_R1_Cleaned[:3000].astype(float),
    "High_R2": EDA_high_R2_Cleaned[:3000].astype(float),
    "High_R3": EDA_high_R3_Cleaned[:3000].astype(float),
}

# ประมวลผลและแสดงผลลัพธ์สำหรับทุกสัญญาณ
for label, eda_signal in eda_cleaned_signals.items():
    print(f"\n### Processing {label} ###")

    # Process the EDA signal
    signals, info = nk.eda_process(eda_signal, sampling_rate=100)

    # Plot the EDA signals and detected features
    print(f"Plotting EDA Signal for {label}...")
    nk.eda_plot(signals, info)
    plt.title(f"EDA Signal and Peaks - {label}")
    plt.show()

    # Analyze the EDA signal
    print(f"Analyzing EDA Signal for {label}...")
    analysis = nk.eda_analyze(signals, sampling_rate=100, method="auto")

    # Print the analysis results
    print(f"Analysis Results for {label}:\n{analysis}\n")

import neurokit2 as nk
import numpy as np
import matplotlib.pyplot as plt

# กำหนดค่า sampling rate และช่วงเวลาที่ต้องการวิเคราะห์
sampling_rate = 15  # 100 Hz
duration_seconds = 40  # 20 seconds
num_samples = sampling_rate * duration_seconds  # Total samples for 20 seconds

# Assuming EDA_*_Cleaned variables are numpy arrays already defined
# ดึงข้อมูล EDA ที่ทำความสะอาดแล้ว
eda_cleaned_signals = {
    "Baseline_R1": EDA_baseline_R1_Cleaned[:len(EDA_baseline_R1_Cleaned)],
    "Baseline_R2": EDA_baseline_R2_Cleaned[:len(EDA_baseline_R2_Cleaned)],
    "Baseline_R3": EDA_baseline_R3_Cleaned[:len(EDA_baseline_R3_Cleaned)],
    "Low_R1": EDA_low_R1_Cleaned[:len(EDA_low_R1_Cleaned)],
    "Low_R2": EDA_low_R2_Cleaned[:len(EDA_low_R2_Cleaned)],
    "Low_R3": EDA_low_R3_Cleaned[:len(EDA_low_R3_Cleaned)],
    "Medium_R1": EDA_medium_R1_Cleaned[:len(EDA_medium_R1_Cleaned)],
    "Medium_R2": EDA_medium_R2_Cleaned[:len(EDA_medium_R2_Cleaned)],
    "Medium_R3": EDA_medium_R3_Cleaned[:len(EDA_medium_R3_Cleaned)],
    "High_R1": EDA_high_R1_Cleaned[:len(EDA_high_R1_Cleaned)],
    "High_R2": EDA_high_R2_Cleaned[:len(EDA_high_R2_Cleaned)],
    "High_R3": EDA_high_R3_Cleaned[:len(EDA_high_R3_Cleaned)]
}

# Function to clean, check, and analyze EDA signals
def analyze_and_plot_eda(signal, label, sampling_rate):
    try:
        # Replace NaN, inf, -inf with 0
        signal = np.nan_to_num(signal, nan=0.0, posinf=0.0, neginf=0.0)

        # Debugging: Print first 10 samples for verification
        print(f"Cleaned data for {label}: {signal[:10]}")

        # Check if signal is empty or contains only zeros
        if len(signal) == 0 or np.all(signal == 0):
            print(f"Warning: {label} has no valid data after cleaning. Skipping analysis.")
            return

        # Process the EDA signal
        signals, info = nk.eda_process(signal, sampling_rate=sampling_rate)

        # Plot the EDA signal and peaks
        print(f"Plotting EDA Signal for {label}...")
        plt.figure(figsize=(10, 6))
        nk.eda_plot(signals, info)
        plt.title(f"EDA Signal and Peaks - {label}")
        plt.show()

        # Analyze the EDA signal
        print(f"Analyzing EDA Signal for {label}...")
        analysis = nk.eda_analyze(signals, sampling_rate=sampling_rate, method="auto")

        # Print the analysis results
        print(f"Analysis Results for {label}:\n{analysis}\n")

    except Exception as e:
        print(f"Error processing {label}: {e}")

# Loop through each signal and analyze it
for label, signal in eda_cleaned_signals.items():
    print(f"Processing {label}...")
    analyze_and_plot_eda(signal, label, sampling_rate)

EDA_low_R1_Cleaned

result_bl_01 = nk.eda_findpeaks(EDA_baseline_R1_Cleaned, sampling_rate=100)
result_bl_02 = nk.eda_findpeaks(EDA_baseline_R2_Cleaned, sampling_rate=100)
result_bl_03 = nk.eda_findpeaks(EDA_baseline_R3_Cleaned, sampling_rate=100)

peaks_EDA_bl_01 = result_bl_01['SCR_Peaks']
peaks_EDA_bl_02 = result_bl_02['SCR_Peaks']
peaks_EDA_bl_03 = result_bl_03['SCR_Peaks']

result_low_01 = nk.eda_findpeaks(EDA_low_R1_Cleaned, sampling_rate=100)
result_low_02 = nk.eda_findpeaks(EDA_low_R2_Cleaned, sampling_rate=100)
result_low_03 = nk.eda_findpeaks(EDA_low_R3_Cleaned, sampling_rate=100)

peaks_EDA_low_01 = result_low_01['SCR_Peaks']
peaks_EDA_low_02 = result_low_02['SCR_Peaks']
peaks_EDA_low_03 = result_low_03['SCR_Peaks']

result_md_01 = nk.eda_findpeaks(EDA_medium_R1_Cleaned, sampling_rate=100)
result_md_02 = nk.eda_findpeaks(EDA_medium_R2_Cleaned, sampling_rate=100)
result_md_03 = nk.eda_findpeaks(EDA_medium_R3_Cleaned, sampling_rate=100)

peaks_EDA_md_01 = result_md_01['SCR_Peaks']
peaks_EDA_md_02 = result_md_02['SCR_Peaks']
peaks_EDA_md_03 = result_md_03['SCR_Peaks']

result_hi_01 = nk.eda_findpeaks(EDA_high_R1_Cleaned, sampling_rate=100)
result_hi_02 = nk.eda_findpeaks(EDA_high_R2_Cleaned, sampling_rate=100)
result_hi_03 = nk.eda_findpeaks(EDA_high_R3_Cleaned, sampling_rate=100)

peaks_EDA_hi_01 = result_hi_01['SCR_Peaks']
peaks_EDA_hi_02 = result_hi_02['SCR_Peaks']
peaks_EDA_hi_03 = result_hi_03['SCR_Peaks']

import matplotlib.pyplot as plt
import numpy as np

# Rename the function to plot_eda_signal
def plot_eda_signal(time, signal, peaks, title, xlabel, ylabel):
    plt.figure(figsize=(18, 8))
    plt.plot(time, signal, label='Cleaned EDA Signal')
    plt.scatter(np.array(peaks) / fs, signal[peaks], color="red", label="Peaks")  # Convert peaks to seconds
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.legend()
    plt.grid(True)
    plt.show()

# Define sampling rate and time duration
fs = 100  # Example sampling rate (samples per second)
duration = len(EDA_low_R3_Cleaned) / fs  # Calculate duration based on the signal length
end_index = int(min(fs * 60, len(EDA_low_R3_Cleaned)))  # Use the shorter of 60 seconds or the signal length

# Generate time vector based on the actual signal length
time_60s = np.linspace(0, end_index / fs, end_index)  # Time vector for the signal length

# Adjust the signals and peaks for the available length
EDA_bl_60s = EDA_baseline_R3_Cleaned[:end_index]
peaks_bl_60s = [peak for peak in peaks_EDA_bl_03 if peak < end_index]

EDA_low_60s = EDA_low_R3_Cleaned[:end_index]
peaks_low_60s = [peak for peak in peaks_EDA_low_03 if peak < end_index]

EDA_medium_60s = EDA_medium_R3_Cleaned[:end_index]
peaks_medium_60s = [peak for peak in peaks_EDA_md_03 if peak < end_index]

EDA_high_60s = EDA_high_R3_Cleaned[:end_index]
peaks_high_60s = [peak for peak in peaks_EDA_hi_03 if peak < end_index]

# Plot for baseline round
# Call the function using its correct name: plot_eda_signal
plot_eda_signal(
    time=time_60s,
    signal=EDA_bl_60s,
    peaks=peaks_bl_60s,
    title="EDA Peaks Detection (Baseline Round 3 - 5 Seconds)",
    xlabel="Time (seconds)",
    ylabel="Amplitude"
)

# Plot for low round
plot_eda_signal(
    time=time_60s,
    signal=EDA_low_60s,
    peaks=peaks_low_60s,
    title="EDA Peaks Detection (Low Round 3 - 5 Seconds)",
    xlabel="Time (seconds)",
    ylabel="Amplitude"
)

# Plot for medium round
plot_eda_signal(
    time=time_60s,
    signal=EDA_medium_60s,
    peaks=peaks_medium_60s,
    title="EDA Peaks Detection (Medium Round 3 - 5 Seconds)",
    xlabel="Time (seconds)",
    ylabel="Amplitude"
)

# Plot for high round
plot_eda_signal(
    time=time_60s,
    signal=EDA_high_60s,
    peaks=peaks_high_60s,
    title="PPG Peaks Detection (High Round 3 - 5 Seconds)", # Typo, should be EDA
    xlabel="Time (seconds)",
    ylabel="Amplitude"
)

"""**HRV**

> **Baseline**
"""

print("PRV Metrics (HRV-based):")
HRV_Baseline_R1 = nk.hrv_time(peaks_EDA_bl_01, sampling_rate=15, show=True)
HRV_Baseline_R2 = nk.hrv_time(peaks_EDA_bl_02, sampling_rate=15, show=True)
HRV_Baseline_R3 = nk.hrv_time(peaks_EDA_bl_03, sampling_rate=15, show=True)

HRV_Baseline_R1
HRV_Baseline_R2
HRV_Baseline_R3

# Plot HRV SDNN & RMSSD
plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_Baseline_R1["HRV_SDNN"][0], HRV_Baseline_R1["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (Baseline Round 1)")
plt.ylabel("Value (ms)")
plt.show()

plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_Baseline_R2["HRV_SDNN"][0], HRV_Baseline_R2["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (Baseline Round 2)")
plt.ylabel("Value (ms)")
plt.show()

plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_Baseline_R3["HRV_SDNN"][0], HRV_Baseline_R3["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (Baseline Round 3)")
plt.ylabel("Value (ms)")
plt.show()

"""> **Low**"""

HRV_Low_R1 = nk.hrv_time(peaks_PG_low_01, sampling_rate=100, show=True)
HRV_Low_R2 = nk.hrv_time(peaks_PG_low_02, sampling_rate=100, show=True)
HRV_Low_R3 = nk.hrv_time(peaks_PG_low_03, sampling_rate=100, show=True)

HRV_Low_R1
HRV_Low_R2
HRV_Low_R3

plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_Low_R1["HRV_SDNN"][0], HRV_Low_R1["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (Low Round 1)")
plt.ylabel("Value (ms)")
plt.show()

plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_Low_R2["HRV_SDNN"][0], HRV_Low_R2["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (Low Round 2)")
plt.ylabel("Value (ms)")
plt.show()

plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_Low_R3["HRV_SDNN"][0], HRV_Low_R3["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (Low Round 3)")
plt.ylabel("Value (ms)")
plt.show()

"""> **Medium**"""

HRV_Medium_R1 = nk.hrv_time(peaks_PG_md_01, sampling_rate=100, show=True)
HRV_Medium_R2 = nk.hrv_time(peaks_PG_md_02, sampling_rate=100, show=True)
HRV_Medium_R3 = nk.hrv_time(peaks_PG_md_03, sampling_rate=100, show=True)

HRV_Medium_R1
HRV_Medium_R2
HRV_Medium_R3

plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_Medium_R1["HRV_SDNN"][0], HRV_Medium_R1["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (Medium Round 1)")
plt.ylabel("Value (ms)")
plt.show()

plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_Medium_R2["HRV_SDNN"][0], HRV_Medium_R2["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (Medium Round 2)")
plt.ylabel("Value (ms)")
plt.show()

plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_Medium_R3["HRV_SDNN"][0], HRV_Medium_R3["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (Medium Round 3)")
plt.ylabel("Value (ms)")
plt.show()

"""> **High**"""

HRV_High_R1 = nk.hrv_time(peaks_PG_hi_01, sampling_rate=100, show=True)
HRV_High_R2 = nk.hrv_time(peaks_PG_hi_02, sampling_rate=100, show=True)
HRV_High_R3 = nk.hrv_time(peaks_PG_hi_03, sampling_rate=100, show=True)

HRV_High_R1
HRV_High_R2
HRV_High_R3

plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_High_R1["HRV_SDNN"][0], HRV_High_R1["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (High Round 1)")
plt.ylabel("Value (ms)")
plt.show()

plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_High_R2["HRV_SDNN"][0], HRV_High_R2["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (High Round 2)")
plt.ylabel("Value (ms)")
plt.show()

plt.figure(figsize=(8, 6))
plt.bar(["SDNN", "RMSSD"], [HRV_High_R3["HRV_SDNN"][0], HRV_High_R3["HRV_RMSSD"][0]], color=['blue', 'green'])
plt.title("HRV SDNN and RMSSD (High Round 3)")
plt.ylabel("Value (ms)")
plt.show()

"""##EDA"""

EDA_R1 = pd.read_csv('Round 1/2024-11-17_13-02-37-689902_EA.csv')
EDA_R2 = pd.read_csv('Round 2/2024-11-17_14-01-18-924340_EA.csv')
EDA_R3 = pd.read_csv('Round 3/2024-11-17_15-08-06-262184_EA.csv')

plt.figure(figsize=(12, 6))
plt.plot(EDA_R1['EA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(EDA_R2['EA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(EDA_R3['EA'], label='Signal')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

eda_clean01 = nk.eda_clean(EDA_R1['EA'], sampling_rate=100, method='neurokit')
eda_clean02 = nk.eda_clean(EDA_R2['EA'], sampling_rate=100, method='neurokit')
eda_clean03 = nk.eda_clean(EDA_R3['EA'], sampling_rate=100, method='neurokit')

# Extract the first 30 seconds of data
eda_clean01_120s = eda_clean01[:12000]
eda_clean02_120s = eda_clean02[:12000]
eda_clean03_120s = eda_clean03[:12000]

# Create time vector for 30 seconds
time_120s = [i / 100 for i in range(12000)]

# Plot for EDA Round 1
plt.figure(figsize=(10, 4))
plt.plot(time_120s, eda_clean01_120s, label='EDA R1 (First 120 Seconds)')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

# Plot for EDA Round 2
plt.figure(figsize=(10, 4))
plt.plot(time_120s, eda_clean02_120s, label='EDA R2 (First 120 Seconds)')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

# Plot for EDA Round 3
plt.figure(figsize=(10, 4))
plt.plot(time_120s, eda_clean03_120s, label='EDA R3 (First 120 Seconds)')
plt.xlabel('Time (seconds)')
plt.ylabel('Signal Value')
plt.legend()
plt.show()

signals_R1, info_R1 = nk.eda_process(eda_clean01_120s, sampling_rate=100)

nk.eda_plot(signals_R1, info_R1)

signals_R2, info_R2 = nk.eda_process(eda_clean02_120s, sampling_rate=100)

nk.eda_plot(signals_R2, info_R2)

signals_R3, info_R3 = nk.eda_process(eda_clean03_120s, sampling_rate=100)

nk.eda_plot(signals_R3, info_R3)